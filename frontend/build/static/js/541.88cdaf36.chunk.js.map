{"version":3,"file":"static/js/541.88cdaf36.chunk.js","mappings":"omMAaA,MAAMA,EAAWA,KACf,MAAOC,EAAOC,IAAYC,EAAAA,EAAAA,UAAS,KAC5BC,EAAQC,IAAaF,EAAAA,EAAAA,UAAS,IAC/BG,GAAmBC,EAAAA,EAAAA,IAAYC,EAAAA,IAC/BC,GAAWC,EAAAA,EAAAA,MAEXC,GAAsBC,EAAAA,EAAAA,cAAY,KACtC,MAAMC,EAAcC,KAAKC,MAAMD,KAAKE,SAAWC,EAAUC,QACnDC,EAAaF,EAAUJ,GAE7BJ,GAASW,EAAAA,EAAAA,KAAQC,EAAAA,EAAAA,GAAiBF,EAAY,WAAW,GACxD,CAACV,IAEEa,GAA0BV,EAAAA,EAAAA,cAAY,KAC1CH,GAASc,EAAAA,EAAAA,IAAU,4BAA4B,GAC9C,CAACd,IAEEe,GAAeZ,EAAAA,EAAAA,cAClBa,IACCA,EAAMC,iBACFzB,GAASG,GACXK,GAASW,EAAAA,EAAAA,KAAQC,EAAAA,EAAAA,GAAiB,CAAEpB,QAAOG,UAAU,YAErDF,EAAS,IACTG,EAAU,KAEVI,GAASkB,EAAAA,EAAAA,IAAS,mCACpB,GAEF,CAAC1B,EAAOG,EAAQK,IAGZmB,GAAoBhB,EAAAA,EAAAA,cAAaa,IACrCvB,EAASuB,EAAMI,OAAOC,MAAM,GAC3B,IAEGC,GAAqBnB,EAAAA,EAAAA,cAAaa,IACtCpB,EAAUoB,EAAMI,OAAOC,MAAM,GAC5B,IAEH,OACEE,EAAAA,EAAAA,MAAA,OAAKC,UAAU,sBAAqBC,SAAA,EAClCC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,qBAEJF,EAAAA,EAAAA,MAAA,QAAMI,SAAUZ,EAAaU,SAAA,EAC3BC,EAAAA,EAAAA,KAAA,OAAAD,UACEF,EAAAA,EAAAA,MAAA,SAAOK,QAAQ,QAAOH,SAAA,EACpBC,EAAAA,EAAAA,KAAA,OAAAD,SAAK,YACLC,EAAAA,EAAAA,KAAA,SACEG,KAAK,OACLC,GAAG,QACHT,MAAO7B,EACPuC,SAAUZ,UAIhBO,EAAAA,EAAAA,KAAA,OAAAD,UACEF,EAAAA,EAAAA,MAAA,SAAOK,QAAQ,SAAQH,SAAA,EACrBC,EAAAA,EAAAA,KAAA,OAAAD,SAAK,aACLC,EAAAA,EAAAA,KAAA,SACEG,KAAK,OACLC,GAAG,SACHT,MAAO1B,EACPoC,SAAUT,UAIhBI,EAAAA,EAAAA,KAAA,UAAQG,KAAK,SAAQJ,SAAC,cACtBC,EAAAA,EAAAA,KAAA,UAAQG,KAAK,SAASG,QAAS9B,EAAoBuB,SAAC,oBAGpDC,EAAAA,EAAAA,KAAA,UACEG,KAAK,SACLG,QAASnB,EACToB,SAAUpC,EAAiB4B,SAE1B5B,GACC0B,EAAAA,EAAAA,MAAAW,EAAAA,SAAA,CAAAT,SAAA,EACEC,EAAAA,EAAAA,KAAA,QAAAD,SAAM,gBACNC,EAAAA,EAAAA,KAACS,EAAAA,GAAS,CAACX,UAAU,eAGvB,yBAIF,EAIV,GAAeY,EAAAA,EAAAA,MAAK7C,E","sources":["components/BookForm/BookForm.js"],"sourcesContent":["import { useState, useCallback, memo } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { FaSpinner } from 'react-icons/fa'\nimport {\n  addBook,\n  fetchBook,\n  setError,\n  selectIsLoadingFromAPI,\n} from '../../redux/slices/booksSlice'\nimport createBookWithId from '../../utils/createBookWithId'\nimport booksData from '../../data/books.json'\nimport './BookForm.css'\n\nconst BookForm = () => {\n  const [title, setTitle] = useState('')\n  const [author, setAuthor] = useState('')\n  const isLoadingFromAPI = useSelector(selectIsLoadingFromAPI)\n  const dispatch = useDispatch()\n\n  const handleAddRandomBook = useCallback(() => {\n    const randomIndex = Math.floor(Math.random() * booksData.length)\n    const randomBook = booksData[randomIndex]\n\n    dispatch(addBook(createBookWithId(randomBook, 'random')))\n  }, [dispatch])\n\n  const handleRandomBookFromApi = useCallback(() => {\n    dispatch(fetchBook('/api/random-book-delayed'))\n  }, [dispatch])\n\n  const handleSubmit = useCallback(\n    (event) => {\n      event.preventDefault()\n      if (title && author) {\n        dispatch(addBook(createBookWithId({ title, author }, 'manual')))\n\n        setTitle('')\n        setAuthor('')\n      } else {\n        dispatch(setError('Please enter a title and author'))\n      }\n    },\n    [title, author, dispatch]\n  )\n\n  const handleTitleChange = useCallback((event) => {\n    setTitle(event.target.value)\n  }, [])\n\n  const handleAuthorChange = useCallback((event) => {\n    setAuthor(event.target.value)\n  }, [])\n\n  return (\n    <div className='app-block book-form'>\n      <h2>Add a New Book </h2>\n\n      <form onSubmit={handleSubmit}>\n        <div>\n          <label htmlFor='title'>\n            <div>Title:</div>\n            <input\n              type='text'\n              id='title'\n              value={title}\n              onChange={handleTitleChange}\n            />\n          </label>\n        </div>\n        <div>\n          <label htmlFor='author'>\n            <div>Author:</div>\n            <input\n              type='text'\n              id='author'\n              value={author}\n              onChange={handleAuthorChange}\n            />\n          </label>\n        </div>\n        <button type='submit'>Add Book</button>\n        <button type='button' onClick={handleAddRandomBook}>\n          Recommendation\n        </button>\n        <button\n          type='button'\n          onClick={handleRandomBookFromApi}\n          disabled={isLoadingFromAPI}\n        >\n          {isLoadingFromAPI ? (\n            <>\n              <span>Loading...</span>\n              <FaSpinner className='spinner' />\n            </>\n          ) : (\n            'Random from API'\n          )}\n        </button>\n      </form>\n    </div>\n  )\n}\n\nexport default memo(BookForm)\n"],"names":["BookForm","title","setTitle","useState","author","setAuthor","isLoadingFromAPI","useSelector","selectIsLoadingFromAPI","dispatch","useDispatch","handleAddRandomBook","useCallback","randomIndex","Math","floor","random","booksData","length","randomBook","addBook","createBookWithId","handleRandomBookFromApi","fetchBook","handleSubmit","event","preventDefault","setError","handleTitleChange","target","value","handleAuthorChange","_jsxs","className","children","_jsx","onSubmit","htmlFor","type","id","onChange","onClick","disabled","_Fragment","FaSpinner","memo"],"sourceRoot":""}